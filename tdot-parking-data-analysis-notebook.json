{"paragraphs":[{"text":"%md\n# Introduction\n\nApproximately 2.8 million parking tickets are issued annually across the City of Toronto. This dataset contains non-identifiable information relating to each parking ticket issued for each calendar year. The tickets are issued by Toronto Police Services (TPS) personnel as well as persons certified and authorized to issue tickets by TPS. The entire dataset is computed using **Apache Spark** Frameworkand **Scala programming** language.\n\nThis data set contains complete records only. Incomplete records in the City database are not included in the data set. Incomplete records may exist due to a variety of reasons e.g. the vehicle registration is out-of-province, tickets paid prior to staff entering the ticket data, etc.The volume of incomplete records relative to the overall volume is low and therefore presents insignificant impact to trend analysis.\n\n**Note**: The data is provided in a CSV format. Some of the data files had few minor issues around encoding. And encoding them with UTF-8 resolved those issues.","dateUpdated":"2017-01-10T17:10:31-0500","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown","tableHide":false,"title":false,"lineNumbers":false,"editorHide":false},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1484081322848_-1614750958","id":"20170110-154842_457108197","result":{"code":"SUCCESS","type":"HTML","msg":"<h1>Introduction</h1>\n<p>Approximately 2.8 million parking tickets are issued annually across the City of Toronto. This dataset contains non-identifiable information relating to each parking ticket issued for each calendar year. The tickets are issued by Toronto Police Services (TPS) personnel as well as persons certified and authorized to issue tickets by TPS. The entire dataset is computed using <strong>Apache Spark</strong> Frameworkand <strong>Scala programming</strong> language.</p>\n<p>This data set contains complete records only. Incomplete records in the City database are not included in the data set. Incomplete records may exist due to a variety of reasons e.g. the vehicle registration is out-of-province, tickets paid prior to staff entering the ticket data, etc.The volume of incomplete records relative to the overall volume is low and therefore presents insignificant impact to trend analysis.</p>\n<p><strong>Note</strong>: The data is provided in a CSV format. Some of the data files had few minor issues around encoding. And encoding them with UTF-8 resolved those issues.</p>\n"},"dateCreated":"2017-01-10T15:48:42-0500","dateStarted":"2017-01-10T17:10:31-0500","dateFinished":"2017-01-10T17:10:31-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:181"},{"title":"Create Objects and Util Functions","text":"// Import pre-requisite objects\nimport java.text.SimpleDateFormat\n\n// Abstract class with common functions\nabstract class Item[T] {\n\n  def getInt(n: String) : Integer = n match {\n    case \"\" => 0\n    case n => n.toInt\n  }\n\n  def getBigDecimal(n: String) : BigDecimal = n match {\n    case \"\" => 0\n    case n => BigDecimal(n)\n  }\n\n  def getLongDate(d: String) : Long = d match {\n    case \"\" => 0\n    case d => getDateFormat.parse(d).getTime\n  }\n\n  def getDateFormat : java.text.SimpleDateFormat = {\n    val sdf = new java.text.SimpleDateFormat(\"yyyyMMdd\")\n    sdf\n  }\n\n  /**\n    * Parses raw data and converts it into a T object\n    *\n    * @param line Line in the DataSet\n    * @return     T object from the DataSet\n    */\n  def parse(line: String) : T\n}\n\n// Schema for Toronto Parking Ticket\ncase class Ticket(tagNumberMasked: String,\n                  dateOfInfraction: Long,\n                  infractionCode: Int,\n                  infractionDescription: String,\n                  fineAmount: BigDecimal,\n                  timeOfInfraction: String,\n                  location1: String,\n                  location2: String,\n                  location3: String,\n                  location4:String,\n                  province: String)\n\nobject TorontoTicket extends Item[Ticket] {\n\n  override def parse(line: String): Ticket = {\n    val data = line.split(\",\", -1) // We do not want to skip trailing characters\n\n    Ticket(\n      data(0),\n      getLongDate(data(1)),\n      getInt(data(2)),\n      data(3),\n      getBigDecimal(data(4)),\n      data(5),\n      data(6),\n      data(7),\n      data(8),\n      data(9),\n      data(10))\n  }\n}\n\n// Function to be used in a filter to convert data into structured data\ndef isHeader(line: String) : Boolean = {\n    line.contains(\"date_of_infraction\")\n}\n\n// Load Parking Data\nval torontoRawTicketingData = sc.textFile(\"/Users/jsingh/Development/big-data/datasets/parking-tickets/full-toronto-data/csv/\")\n\n// Parse Parking Data into Structured Data\nval torontoTickets = torontoRawTicketingData.filter(line => !isHeader(line)).map(TorontoTicket.parse)","dateUpdated":"2017-01-10T17:49:01-0500","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorHide":false,"tableHide":false,"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1484080745104_2107894986","id":"20170110-153905_1108941848","result":{"code":"SUCCESS","type":"TEXT","msg":"\nimport java.text.SimpleDateFormat\n\ndefined class Item\n\n\ndefined class Ticket\ndefined object TorontoTicket\n\nisHeader: (line: String)Boolean\n\ntorontoRawTicketingData: org.apache.spark.rdd.RDD[String] = /Users/jsingh/Development/big-data/datasets/parking-tickets/full-toronto-data/csv/ MapPartitionsRDD[58] at textFile at <console>:37\n\ntorontoTickets: org.apache.spark.rdd.RDD[Ticket] = MapPartitionsRDD[60] at map at <console>:46\n"},"dateCreated":"2017-01-10T15:39:05-0500","dateStarted":"2017-01-10T17:01:52-0500","dateFinished":"2017-01-10T17:01:53-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:182","focus":true},{"title":"What is the total infraction amount to date?","text":"val totalAmount = torontoTickets.map(_.fineAmount).reduce(_ + _)\ncurrencyFormatter.format(totalAmount)","dateUpdated":"2017-01-10T17:01:57-0500","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","tableHide":false,"editorHide":false,"title":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1484081074737_925191070","id":"20170110-154434_1660732228","result":{"code":"SUCCESS","type":"TEXT","msg":"\ntotalAmount: BigDecimal = 877387795\n\nres46: String = $877,387,795.00\n"},"dateCreated":"2017-01-10T15:44:34-0500","dateStarted":"2017-01-10T17:01:57-0500","dateFinished":"2017-01-10T17:02:18-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:183"},{"title":"What are the top 10 worst streets in Toronto by total infraction amount?","text":"val streetsByTotalFineAmount = torontoTickets.map(ticket => (ticket.location2, ticket.fineAmount)).reduceByKey(_ + _)\nval top10StreetsByTotalFineAmount = streetsByTotalFineAmount.map(street => (street._2, street._1)).sortByKey(false).take(10)\n\nprintln(\"\\n\")\ntop10StreetsByTotalFineAmount.foreach(item => {\n    val amount = currencyFormatter.format(item._1)\n    val street = item._2\n    println(s\"$amount for $street\")\n})","dateUpdated":"2017-01-10T17:14:03-0500","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","title":true,"editorHide":false},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1484082350150_-1360348736","id":"20170110-160550_283684063","result":{"code":"SUCCESS","type":"TEXT","msg":"\nstreetsByTotalFineAmount: org.apache.spark.rdd.RDD[(String, BigDecimal)] = ShuffledRDD[75] at reduceByKey at <console>:48\n\ntop10StreetsByTotalFineAmount: Array[(BigDecimal, String)] = Array((2090795,410 COLLEGE ST), (1885945,20 EDWARD ST), (1629975,60 MURRAY ST), (1546450,2075 BAYVIEW AVE), (1532550,1090 DON MILLS RD), (1482725,1750 FINCH AVE E), (1457065,JAMES ST), (1437315,1 BRIMLEY RD S), (1431720,3401 DUFFERIN ST), (1281730,18 GRENVILLE ST))\n\n\n$2,090,795.00 for 410 COLLEGE ST\n$1,885,945.00 for 20 EDWARD ST\n$1,629,975.00 for 60 MURRAY ST\n$1,546,450.00 for 2075 BAYVIEW AVE\n$1,532,550.00 for 1090 DON MILLS RD\n$1,482,725.00 for 1750 FINCH AVE E\n$1,457,065.00 for JAMES ST\n$1,437,315.00 for 1 BRIMLEY RD S\n$1,431,720.00 for 3401 DUFFERIN ST\n$1,281,730.00 for 18 GRENVILLE ST\n"},"dateCreated":"2017-01-10T16:05:50-0500","dateStarted":"2017-01-10T17:14:03-0500","dateFinished":"2017-01-10T17:14:55-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:184"},{"title":"Map of Top 10 Worst Streets for Parking","text":"%md\n[![ScreenShot](https://raw.githubusercontent.com/sqoopd/tdot-parking-data-analysis/master/images/worst-streets.jpg)](https://batchgeo.com/map/ced3387a27b3ad7fb979293dd9ea67a8)","dateUpdated":"2017-01-10T17:23:27-0500","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown","title":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1484086240604_1053899109","id":"20170110-171040_2030126730","result":{"code":"SUCCESS","type":"HTML","msg":"<p><a href=\"https://batchgeo.com/map/ced3387a27b3ad7fb979293dd9ea67a8\"><img src=\"https://raw.githubusercontent.com/sqoopd/tdot-parking-data-analysis/master/images/worst-streets.jpg\" alt=\"ScreenShot\" /></a></p>\n"},"dateCreated":"2017-01-10T17:10:40-0500","dateStarted":"2017-01-10T17:23:00-0500","dateFinished":"2017-01-10T17:23:00-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:185"},{"title":"What are the top 10 Times at which tickets are issued?","text":"val timeSlotsByTotalFineAmount = torontoTickets.map(ticket => (ticket.timeOfInfraction, ticket.fineAmount)).reduceByKey(_ + _)\nval top10TimeSlotsByTotalFineAmount = timeSlotsByTotalFineAmount.map(ticket => (ticket._2, ticket._1)).sortByKey(false).take(10)\n\nprintln(\"\\n\")\ntop10TimeSlotsByTotalFineAmount.foreach(item => {\n    val amount = currencyFormatter.format(item._1)\n    val timeSlot = item._2\n    println(s\"\\t\\t$amount for $timeSlot\")\n})","dateUpdated":"2017-01-10T17:50:30-0500","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","title":true,"editorHide":false},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1484082513987_1137854876","id":"20170110-160833_1717163240","dateCreated":"2017-01-10T16:08:33-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:186","dateFinished":"2017-01-10T17:50:56-0500","dateStarted":"2017-01-10T17:50:30-0500","result":{"code":"SUCCESS","type":"TEXT","msg":"\ntimeSlotsByTotalFineAmount: org.apache.spark.rdd.RDD[(String, BigDecimal)] = ShuffledRDD[86] at reduceByKey at <console>:48\n\ntop10TimeSlotsByTotalFineAmount: Array[(BigDecimal, String)] = Array((2380790,1605), (1900250,1606), (1876960,1607), (1781185,1608), (1713015,1609), (1711135,1535), (1692015,1610), (1573520,1611), (1532165,1612), (1478175,1536))\n\n\n\t\t$2,380,790.00 for 1605\n\t\t$1,900,250.00 for 1606\n\t\t$1,876,960.00 for 1607\n\t\t$1,781,185.00 for 1608\n\t\t$1,713,015.00 for 1609\n\t\t$1,711,135.00 for 1535\n\t\t$1,692,015.00 for 1610\n\t\t$1,573,520.00 for 1611\n\t\t$1,532,165.00 for 1612\n\t\t$1,478,175.00 for 1536\n"},"focus":true},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1484088605428_1480938095","id":"20170110-175005_1954588208","dateCreated":"2017-01-10T17:50:05-0500","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:629","dateUpdated":"2017-01-10T17:50:15-0500","text":""}],"name":"TDOT Parking Data Analysis","id":"2C6FGGUWA","angularObjects":{"2C762NEY4:shared_process":[],"2C6JD82JK:shared_process":[],"2C86BEKGN:shared_process":[],"2C5AJP878:shared_process":[],"2C5CVWWPP:shared_process":[],"2C79BD9XD:shared_process":[],"2C7NJPAKN:shared_process":[],"2C93HGUC8:shared_process":[],"2C86H7XUY:shared_process":[],"2C5WDQ551:shared_process":[],"2C5ZM2KK1:shared_process":[],"2C7DBF71G:shared_process":[],"2C6T15PCV:shared_process":[],"2C76HZRJ7:shared_process":[],"2C5AXGY1Q:shared_process":[],"2C81P6VXS:shared_process":[],"2C6MU4C4P:shared_process":[],"2C6NHWT1C:shared_process":[]},"config":{"looknfeel":"default"},"info":{}}